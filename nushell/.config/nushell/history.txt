nvim
exit
lf
lf Downloads/
ls
cd sw/mypro-server
ls
make run
ls
lcear
clear
ls
clear
ls
exit
exit
exit
ls
clear
ls
exit
ls
exit
ls
clear
ls
exit
ls
exit
exit
ls
exit
ls
exit
ls
clear
ls
mdkir hola
ls
exit
exit
exit
ls
clear
ls
clear
ls
ls -la
clear
ls -l
clear
ls -l
clear
ls
clear
ls
ls Downloads/
lf Downloads/
ls
clear
exit
ls
exit
ls
clear
l
lcear
clear
ls
clear
nix profile list
exit
ls
exit
lss
exit
ls
exit
clear
ls
clear
ls
clear
ls
clear
sys
sys net
sys
sys cpu
sys
sys temp
ls
sys
sys disks
sys
sys users
sys
sys mem
sys
cd Downloads/
ls
git branch
ls
rm `Prueba de Escritorio_2025.docx`
ls
cd documents/
ls
cd cards/
ls
open cards.db
open cards.db | get cards
open cards.db | get cards | where cvv = 981
open cards.json
open cards.json | get cards
open cards.db | get cards
open cards.db | get cards | where bank = 'Lemon'
open cards.db | get cards | table
open cards.db | get cards | table | where cvv = 5
open cards.db | get cards
cd
open ~/Downloads/documents/cards/cards.db | get cards
open ~/Downloads/documents/cards/cards.db | get cards | sort-by cvv
config nu --doc 
config nu --doc | nu-highlight | less -R
exit
exit
exit
ls && ls
ls; ls
ls
ls; ls
echo '4'; ls
ls
exit
exit
ansi -l
config nu --doc | nu-highlight | less -R
exit
exit
exit
exit
exit
eixt
exit
recent
exit
ccd
ls
ls | fzf
find ~/sw -maxdepth 4 -type d -name .git -print | sed -e 's/\/.git//g' | fzf --reverse
find
find ~/sw
find ~/sw .git
.git
echo '.git' | find ~/sw
ls sw
ls sw | find .git
ls sw
ls sw | find mypro
find
find --help
fzf --reverse ~/sw
ls sw | fzf --reverse
ls sw
ls sw | get name
cd Downloads/
ls ~/sw | get name
ls ~/sw | get name | fzf --reverse
get
get --help
ls ~/sw | table 
ls ~/sw | table | get name
ls ~/sw | table | columns
ls ~/sw | columns
ls ~/sw | column
ls ~/sw | column name
column
column --help
ls ~/sw
ls ~/sw | select name
ls ~/sw | get name
ls ~/sw | select name | get name
ls ~/sw | get name
ls ~/sw | get name | reject id
ls ~/sw
ls ~/sw | reject #
ls ~/sw | reject \#
ls ~/sw | reject idnex
ls ~/sw | reject index
ls ~/sw
ls ~/sw | flatten
ls ~/sw | get name
ls ~/sw | get name | to list
ls ~/sw | get name | to csv
ls ~/sw | get name 
ls ~/sw | get name | describe
ls ~/sw | get name | flatten
ls ~/sw | get name | join
ls ~/sw | get name | join '\n'
ls ~/sw | get name | join
ls ~/sw | get name | join $in
ls ~/sw | get name | wrap
wrap --help
ls ~/sw | get name
ls ~/sw | get name | str join ','
ls ~/sw | get name | str join '\n'
ls ~/sw | get name | str join '\n' | fzf
ls ~/sw | get name | str join '\\n' | fzf
ls ~/sw | get name | fzf
ls ~/sw | get name | describe
get --help
ls ~/sw | get name | ^fzf
ls ~/sw | get name | to text
ls ~/sw | get name | to text | fzf
ls ~/sw | get name | to text | fzf --reverse
ls ~/sw | get name | to text | fzf --reverse | cd $in
exit
ccd
exit
ccd
exit
ccd
cd ccd
exit
cd ccd
cd (ccd)
exit
ccd
ls
exit
ls ~/sw
ls ~/sw | to text
exit
ts
ls
clear
ls
clear
ls
docker 
docker ls
docker ps
docker ps | table
docker ps
docker ps | parse 
docker ps
docker ps | from ssv
docker image ls
docker image ls| from ssv 
docker image ls | from ssv 
docker image ls | from ssv | get repository
docker image ls | from ssv | get repository | to text
docker image ls | from ssv | get repository | to text | fzf
nvim ~/.config/nushell/history.txt
ls
^open Desktop/
lf
lf Downloads/
ls
clear
lf
ls
clear
lf
ls
clear
ls
clear
ls
clear
ls
clear
exit
nu
nu --help
exit
exiyt
exit
cd ..
clear
exit
ls
clear
ts
nvim ~/.config/nushell/history.txt
ls
clera
clear
ls
clear
ls
sys net | get ip | flatten | where protocol == 'ipv4' and loop == false | get address | to text
nvim ~/.config/nushell/history.txt
sys net | get ip | flatten | where protocol == 'ipv4' and loop == false | get address | to text
ip
exit
nvim ~/Desktop/notas.md
nvim ~/Desktop/iv.notas.md
ls
clear
ls | get name
clear
ls
cd infra/
ls
clear
ls
clear
ls
nvim .
ls
cd ..
ls
clear
ls
make run
ls
clear
ls
clear
make run | each { |i| print($i) }
make run | each 
make run | each |i| print($i)
make run | each { |i| print($i) }
make run | each { |i| print ($i) }
make run
make run | each { |i| print ($i) }
make run | lines
make run | lines | each { |i| print ($1) }
make run | lines | each { |i| print $i }
make run | each { |i| print $i }
make run | split column ' '
make run | each { |i| print $i } | split column ' '
make run | lines | each { |i| print $i }
make run | detect columns
make run | str replace 'INFO' 'I'
str replace --help
make run | describe
make run | lines | describe
make run | lines | to csv | describe
make run | lines | to json | describe
make run | from ssv
make run | from ssv | describe
make run | from ssv | table
make run | lines | "{date} {time} {level} #{rest}"
make run | lines | "{date} {time} {level} #{rest}" | str trim
make run | lines | parse "{date} {time} {level} #{rest}"
make run | lines | parse "{date} {time} {level} #{rest}" | str trim
make run | lines | parse "{date} {time} {level} #{rest}" | describe
make run | each {||} | parse "{date} {time} {level} #{rest}" | describe
make run | each {||} | parse "{date} {time} {level} #{rest}"
make run | each {||} | parse "{date} {time} {level} #{rest}" | print date
exit
make run | each {||} | parse "{date} {time} {level} #{rest}" | print $date
make run | each {|i| $i }
make run | each {|i| $i } | describe
make run | each {|i| $i } | first
make run | each {|i| $i }
make run | each {|i| str replace 'INFO' 'I' $i }
make run | lines | each { |i| $i } | print 'hola'
exit
make run | lines | each { |i| $i } | parse "{date} {time} {level} {message}"
make run | lines | each { |line| $line | parse "{date} {time} {level} {message}" | print }
make run | lines | each { |line| $line | parse "{date} {time} {level} {message}" | print $date }
make run | lines | each { |line| $line | parse "{date} {time} {level} {message}" | print date }
make run | lines | each { |line| $line | parse "{date} {time} {level} {message}" | print }
make run | lines | each { |line| $line | parse "{date} {time} {level} {message}" | print '' }
ping 8.8.8.8 | each {|i| print ($i | parse -r "(?P<time>time=)(?P<ms>.*)")}
go run ./cmd/server
ping 8.8.8.8 | each {|i| print ($i | parse -r "(?P<time>time=)(?P<ms>.*)")}
go run ./cmd/server | each { |i| print ($i | parse "{date} {time} {level} {message}") }
go run ./cmd/server | each { |i| print ($i | parse -r "{date} {time} {level} {message}") }
go run ./cmd/server | lines | each { |i| print ($i | parse -r "{date} {time} {level} {message}") }
pint 8.8.8.8 | describe
ping 8.8.8.8 | describe
ping
man ping
ping 8.8.8.8 | describe
ping 8.8.8.8 
ping 8.8.8.8 | describe
go run ./cmd/server | describe
go run ./cmd/server |> describe
ls
go run ./cmd/server | descirb
go run ./cmd/server | grep 'error'
go run ./cmd/server o+e>| str upcase
go run ./cmd/server o+e>| str upcase | print
go run ./cmd/server o+e>| each {|i| $i }
go run ./cmd/server o+e>| lines | each {|i| $i }
go run ./cmd/server o+e>| lines | each {|i| print $i } 
go run ./cmd/server o+e>| lines | each {|i| $i } 
go run ./cmd/server o+e>| lines | each {|i| $i } | print
go run ./cmd/server o+e>| each {|i| $i } | print
go run ./cmd/server o+e>| lines | each {|i| $i } | print
go run ./cmd/server o>| lines | each {|i| $i } | print
go run ./cmd/server >| lines | each {|i| $i } | print
go run ./cmd/server o+e>| lines | each {|i| $i } | print
go run ./cmd/server o+e>| each {||}
go run ./cmd/server o+e>| each {||} | lines
go run ./cmd/server o+e>| lines | each {||}
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}"
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | get message
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | get message | to text
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | print date
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | print $date
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | print (get date)
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | print ($in.date)
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | print ($in.date) | to text
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}"
go run ./cmd/server o+e>| lines | from ssv | to text
go run ./cmd/server o+e>| from ssv | to text
go run ./cmd/server o+e>| from ssv
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}"
cal
input
input list
ls | input list
input --help
input list --help
ls | input list --fuzzy
ls | input list --fuzzy "select"
find
find --help
path
ls
ls --help
ls ..(glob **/*.{git})
ls ...(glob **/*.{git})
ls ...(glob **/*.{git}$)
ls ...(glob **/*.{git})
ls ...(glob **/*.{git}) ~/sw
ls --help
ls sw
ls ~/sw
ls ~/sw/**/.git
ls ~/sw/*/.git
ls ~/sw/**/.git
ls ~/sw/*/.git
ls ~/sw/*/.git | input list --fuzzy
ls ~/sw/*/.git | get name | input list --fuzzy
ls ~/sw/*/.git | get name | str replace '.git' '' | input list --fuzzy
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy
path
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy 
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy  | path basename
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | path basename
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | path basename $in
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | path basename
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | (path basename $in)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | path basename
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds hola
exit
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds (path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds ($in | path basename)
exti
exit
tmux new-session --help
tmux new-session -help
tmux --help
tmux new-session
ts
exit
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds ($in | path basename) | echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds ($in | path basename) && echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds ($in | path basename) and echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds ($in | path basename) ; echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds ($in | path basename) e>/dev/null; echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | tmux new-session -c $in -ds ($in | path basename); echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -i { tmux new-session -c $in -ds ($in | path basename); echo ($in | path basename) }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -i { tmux new-session -c $in -ds ($in | path basename)}; echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -i { tmux new-session -c $in -ds ($in | path basename) $in }; echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -i { tmux new-session -c $in -ds ($in | path basename); $in }; echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -i { tmux new-session -c $in -ds ($in | path basename)}; echo ($in | path basename)
do
do --help
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -i { tmux new-session -c $in -ds ($in | path basename); echo ($in | path basename) }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -s { tmux new-session -c $in -ds ($in | path basename); echo ($in | path basename) }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -p { tmux new-session -c $in -ds ($in | path basename); echo ($in | path basename) }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename); echo ($in | path basename) }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename) and echo ($in | path basename) }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename)} and echo ($in | path basename)
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename)} and echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename) e>/dev/null} and echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename)} and echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename) and exit 0} and echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename)} and echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --env { $env.name = ($in | path basename) ; tmux new-session -c $in -ds $env.name } and echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --env { $env.name = ($in | path basename) ; tmux new-session -c $in -ds $env.name }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --env -i { $env.name = ($in | path basename) ; tmux new-session -c $in -ds $env.name }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --env -i { $env.name = ($in | path basename) ; tmux new-session -c $in -s $env.name }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --env -i { $env.name = ($in | path basename) ; tmux new-session -c $in -ds $env.name }
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | export-env { $env.name = ($in | path basename); $env.dir = $in); echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | export-env { $env.name = ($in | path basename) and $env.dir = $in); echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | export-env { $env.name = ($in | path basename) and $env.dir = ($in)); echo '3'
with-env
with-env --help
port
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do --ignore-errors { tmux new-session -c $in -ds ($in | path basename)} and echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | try { tmux new-session -c $in -ds ($in | path basename)}
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | try { tmux new-session -c $in -ds ($in | path basename)}; echo '3'
try --help
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do { tmux new-session -c $in -ds ($in | path basename)}; echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | do -i { tmux new-session -c $in -ds ($in | path basename)}; echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | try { tmux new-session -c $in -ds ($in | path basename)}; echo '3'
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | try { tmux new-session -c $in -ds ($in | path basename)}; echo $in
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.name = ($in | path basename); try { tmux new-session -c $in -ds $env.name}; echo $env.name
exit
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.name = ($in | path basename) and $env.dir = $in; try { tmux new-session -c $in -ds $env.name}; echo $env.name
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.name = ($in | path basename) ; $env.dir = $in; try { tmux new-session -c $in -ds $env.name}; echo $env.name
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.name = ($in | path basename) ; $env.dir = $in; try { tmux new-session -c $in -ds $env.name}; echo $env.dir
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.dir = { path = ($in | path basename), name = $in }; try { tmux new-session -c $in -ds $env.name}; echo $env.dir
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.dir = { path = ($in | path basename); name = $in }; try { tmux new-session -c $in -ds $env.name}; echo $env.dir
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.dir = { path: ($in | path basename), name: $in }; try { tmux new-session -c $in -ds $env.name}; echo $env.dir
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.dir = { path: $in, name: ($in | path basename) }; try { tmux new-session -c $env.dir.path -ds $env.dir.name}; echo $env.dir.name
exit
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.dir = { path: $in, name: ($in | path basename) }; try { tmux new-session -c $env.dir.path -ds $env.dir.name}; echo $env.dir.name
exit
ls ~/sw/*/.git | get name | str replace '/.git' '' | input list --fuzzy | $env.dir = { path: $in, name: ($in | path basename) }; try { tmux new-session -c $env.dir.path -ds $env.dir.name}; tmux switch-client -t $env.dir.name
exit
zsh
exit
ts
exit
exit
ts
input list --help
ls ~/sw | input list
ls ~/sw | get name | input list
ls ~/sw | get name | input list --mulit
ls ~/sw | get name | input list --multi
ls ~/sw | get name | input list --multi --fuzzy
ls ~/sw | get name | input list --multu
ls ~/sw | get name | input list --multi
ts
exit
tmux a
exit
ts
nvim
ts
exit
exit
exit
ls
nvim
exit
ccd
exit
ccs
ccd
v
exit
ccd
ls
clear
ls
clear
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | print ($in.date) | to text
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | to text
parse --help
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | to text
parse 
parse --help
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | get message
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | get message | detect columns
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | get message | table | detect columns
go run ./cmd/server o+e>| lines | parse "{date} {time} {level} {message}" | to text
go run ./cmd/server
go run ./cmd/server o+e>| lines | from json
go run ./cmd/server o+e>| from jso
go run ./cmd/server o+e>| from json
go run ./cmd/server o+e>| from json | get time
go run ./cmd/server o+e>| from json | get time | to text
go run ./cmd/server o+e>| lines | from json
go run ./cmd/server o+e>| lines | each {||} | from json
go run ./cmd/server o+e>| lines | each {|i| $i | from json}
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | get date
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | get time | fromt date
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | get time | format date
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | get time | format date | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | get level
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | get level | to text
go run ./cmd/server
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject time_unix_nano
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject time_unix_nano | to text
reject
reject --help
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | to json
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | to json | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|l| $"l: $l.level"}
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|l| "l: $l.level"}
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|l| "l: $(l.level)"}
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|l| l.level}
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| i.level}
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $i.level} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"$i.level"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | parse date) ($i.level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | to text
parse date
parse datetime
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | parse datetime) ($i.level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date) ($i.level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%h:%m:%s') ($i.level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level[0]) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level.0) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i.message) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i | get message) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | merge { message: '' } | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent |  each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i.msg) ($i | reject -i time level)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i.msg) ($i | reject -i time level msg)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level) ($i.service) ($i.msg) ($i | reject -i time level msg service)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level | char at 0) ($i.service) ($i.msg) ($i | reject -i time level msg service)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level | first) ($i.service) ($i.msg) ($i | reject -i time level msg service)"} | to text
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level | split chars | first) ($i.service) ($i.msg) ($i | reject -i time level msg service)"} | to text
cd ../go/
go run ./cmd/server o+e>| lines | each {|i| $i | from json} | reject -i time_unix_nano remote_ip bytes_in bytes_out latency_nano user_agent | each {|i| $"($i.time | format date '%H:%M:%S') ($i.level | split chars | first) ($i.service) ($i.msg) ($i | reject -i time level msg service)"} | to text
make run
http
clear
$env.url = "http://localhost:8080/v1"
echo $env.url
http post --help
http post $env.url { email: 'faustofusse@gmail.com' }
{ email: 'faustofusse@gmail.com' } | http post $env.url
http post $env.url --content-type application/json { email: 'faustofusse@gmail.com' }
http post
http post --content-type application/json $env.url { email: 'faustofusse@gmail.com' }
http post
$env.url | describe
http post --help
http post --content-type application/json '($env.url)' { email: 'faustofusse@gmail.com' }
http post --content-type application/json ($env.url) { email: 'faustofusse@gmail.com' }
http post --content-type application/json ($env.url | to text) { email: 'faustofusse@gmail.com' }
http post --content-type application/json ($env.url | raw) { email: 'faustofusse@gmail.com' }
$env.url | to text
$env.url
$env.url | raw
$env.url | str raw
$env.url | str trim
http post --content-type application/json ($env.url | str trim) { email: 'faustofusse@gmail.com' }
http post --content-type application/json $env.url/users/login { email: 'faustofusse@gmail.com' }
http post --content-type application/json "($env.url)/users/login" { email: 'faustofusse@gmail.com' }
http post --content-type application/json $env.url\/users/login { email: 'faustofusse@gmail.com' }
http post --content-type application/json $"($env.url)/users/login" { email: 'faustofusse@gmail.com' }
http post --content-type application/json $"($env.url)/users/login" { email: 'faustofusse@gmail.com', password: 'Password12' }
http post --content-type application/json $"($env.url)/users/login" { email: 'faustofusse@gmail.com', password: 'Password123' }
http post --content-type application/json $"($env.url)/users/login" { email: 'faustofusse@gmail.com', password: 'Password123' } | get refresh | to text | pbcopy
$env.refresh = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NzU2NzYzNzYsImlhdCI6MTc0NDE0MDM3NiwidXNlciI6IjY3NjEwNjQ3NDcwZDYxMjc5ODNlYTM2MiIsInNlc3Npb24iOiI2N2Y1Nzg1ODNkOWViOGJlMTU4YjNmNDIifQ.JT3UmZzSJx2vtEhDEYQF95cIdkDrpFQQTZUnc_UrUK4' # fausto
$env.refresh
clear
http get $"($env.url)/jobs"
http get --help
http get --headers [auth-refresh $env.refresh] $"($env.url)/jobs" 
http get --headers [auth-token $env.refresh] $"($env.url)/jobs" 
http get --headers [Authorization $"Bearer $(http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh })"] $"($env.url)/jobs" 
http get --headers [Authorization $"Bearer $(http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh } | get token | to text)"] $"($env.url)/jobs" 
http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh } | get token | to text
$"Bearer $(http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh } | get token | to text)"
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh } | get token | to text)"] $"($env.url)/jobs" 
$env.role = 'client'
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" 
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | to json
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs.permissions
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | get permissions
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions | get permissions
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions | get permissions | flatten
make run
clear
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions | get permissions | flatten
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/users"
$env.role
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions
go run ./cmd/server
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions
go run ./cmd/server
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id status permissions visits
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | get visits | flatten
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | get visits
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | get visits | flatten
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | get visits | flatten | describe
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | get visits
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | first | get visits
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | first | to json
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | where visits > 0 | to json
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits | to json
go run ./cmd/server
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits | to json
go run ./cmd/server
lf utn/simulacion/
^open utn/simulacion/guia.tps.pdf
nvim ~/Desktop/temp.md
exit
ls
clear
ls
clear
ls
clear
ls
clear
which nu
make run
nix develop .
go version
which terraform
terraform --version
nix search terraform
nix search nixpkgs#terraform
nix 
nix search
ls
clear
pwd
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
pwd
make run
which nu
make run
ls
clear
ls
clear
ls
exit
nix develop .
nix --help
nix search --help
zsh
echo $SHELL
echo $env.SHELL
make run
nix search nixpkgs templ
ls
clear
zsh
exit
nix develop .
exit
nu
exit
exit
v
exit
zsh
ls
clear
ls
clear
ls
clear
s
ls
clear
ccd
pwd
ccd
ls
pwd
echo $HOME
$env.home
clear
ls
clear
make run
which go
go version
nix flake
nix flake update
go version
nix flake
nix flake check
nix flake check --all-systems
exit
cd utn/simulacion/
ls
lf
code .
lf
exit
zsh
exit
which go
exit
nix develop .
which go
exit
ls
which go
which no
which nu
which go
make run
$env.SHELL
make run
$env.SHELL
ls
clear
make run
cd
ls
make run
which nu
which subl
nvim c.txt
rm c.txt
ls
lf
sys 
sys disks
sys diss
sys disks
ls | input --fuzzy
ls | input --liust --fuzzy
ls | input list --fuzzy
lf
exit
exit
f
lf
exit
nlf
lf
nvim hola.md
lf
exit
ls
lf
adb devices
sudo adb start-server
adb devices
exit
exit
lf
sys disks
clear
lf
make run
lf
make run
go run ./cmd/server
make runn
make run
reject --help
make run
go run ./cmd/server
make run
which go
exit
make run
go run ./cmd/server
make run
exit
lf
exit
exi
exit
cd ..
go run ./cmd/server
lf
ls
exit
lf
lf Downloads/
ls
cler
ls
clear
ls
cd s
cd sw
ls
npx create-next-app@latest
npm install -g npm@11.3.0
clear
ls
clear
ls
clear
ls
clear
ls
cd futbol/
l
ls
npm dev
nom run dev
npm run dev
git init
git add .
git commit -m "first commit"
v
git remote add origin https://github.com/faustofusse/futbol.git
git push -u origin main
clear
ls
clear
ls
clear
code .
sys net | get ip | flatten | where protocol == 'ipv4' and loop == false | get address | to text
ls
gh
npm run dev
npm i drizzle-orm @libsql/client<\n>
npm i -D drizzle-kit<\n><\n>
npm audit fix
clear
cd sw/fadeeac/
v
nvim ,
mkdir .env
rm -rf .env
touch .env
mpx drizzle-kit
npx drizzle-kit 
npm run dev
npm i drizzle-orm @libsql/client dotenv<\n>
npx drizzle-kit push
which node
npx drizzle-kit push
npm run dev
git add .
git commit -m "feat: db"
git push
clear
npm run dev
npx shadcn@latest init<\n>
nvim .
exit
ls
clear
npm run dev
git add .
git commit -m "feat: hola"
git push
clear
cd
code utn/simulacion/
ls
clear
cd sw/cnlive-server/
v
ls
ncdu pkg/static
ncdu pkg/static/
cd ..
ls
cd prueba-svelte/
clear
ls
ncdu
nvim .
rm -rf bundled/
bun run server.js
svelte: 40kib
ncdu
cd ../futbol/
ls
nvim package.json
next build
nvim .
ncdu
ls
clear
ls
clear
ls
clear
nvim .
cd ../prueba-svelte/
exit
lf
lf Downloads/
nvim .
cd
lf
lf Downloads/
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits | to json
$env.url = "http://localhost:8080/v1"
$env.role = "client"
$env.refresh = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NzU2NzYzNzYsImlhdCI6MTc0NDE0MDM3NiwidXNlciI6IjY3NjEwNjQ3NDcwZDYxMjc5ODNlYTM2MiIsInNlc3Npb24iOiI2N2Y1Nzg1ODNkOWViOGJlMTU4YjNmNDIifQ.JT3UmZzSJx2vtEhDEYQF95cIdkDrpFQQTZUnc_UrUK4' # fausto
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits | to json
go run ./cmd/server
go run ./cmd/server | less
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits | to json | less
go run ./cmd/server | less
go run ./cmd/server
lf
lf Downloads/
lf
lf Downloads/
lf
lf Downloads/
lf
lf Downloads/
lf
sys disks
cd ..
ncdu
gallery-dl
gallery-dl --help
lf
sys disks
lf
sys disks
lf
sys disks
lf
exit
lf
sys disks
lf
l
ls
lf
ls
clear
cat hola
open hola
nvim hola
jkjk
open hola
open hola | select *
open hola | select * from archive
open hola | select archive
open hola | get archive
lf
open hola | get archive
lf
sys disks
lf
sys diss
sys dikss
sys disks
lf
sys disks
exit
ls
clear
lf
lf
exit
lf
nvim notes.md
lf
cd
cd Downloads/
lf
lf Downloads/
lf
lf Downloads/
exit
exit
exit
cd
go run ./cmd/server
podman compose up
podman machine start
pkill docker
sudo pkill docker
pgrep docker
ps
pgrep docker
kill 12021 -9
sudo kill -9 12021
pgrep docker
$env.url = "http://localhost:8080/v1"
$env.role = "professional"
http post --content-type application/json $"($env.url)/users/login" { email: 'antoniogarcia@gmail.com', password: 'Password12' } | get refresh | to text | pbcopy
$env.refresh = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NzYyNTc2NTMsImlhdCI6MTc0NDcyMTY1MywidXNlciI6IjY0Mzc2MjNhZTI0ZTI4NzVmZDIyMzgxNyIsInNlc3Npb24iOiI2N2ZlNTZmNWI0NDU2MjI2ZmI3NjEyMjIifQ.KFP7O8cOIxatcd1Z_01R_u-kR-OWjQ1alOZFNQaw30E' # antonio
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits | to json | less
v
lf
lf Downloads/
lf
lf Desktop/
go run ./cmd/server
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits | to json | less
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | first | get visits
http get --headers [Authorization $"Bearer (http post $"($env.url)/auth/refresh" --content-type application/json { refresh: $env.refresh, role: $env.role } | get token | to text)"] $"($env.url)/jobs" | get jobs | select id visits | to json | less
ls
clear
ls
clear
ls
^ks
^ls
clear
ls
clear
ls -la
ls -l
clear
ls
l
clear
lf Downloads/
code utn/simulacion/
lf
lf Downloads/
brew search penpot
cd Desktop/
curl -o docker-compose.yaml https://raw.githubusercontent.com/penpot/penpot/main/docker/images/docker-compose.yaml<\n>
docker compose -p penpot -f docker-compose.yaml up -d<\n>
podman compose -p penpot -f docker-compose.yaml up -d
docker ps
podman ps
clear
make run iphone
make run iphone
cat .env
nvim .env
cat .env
cat .env | grep JWT
podman compose up
ts
ts
v
npm run dev
git pull
npx drizzle-kit
npm run dev
npx drizzle-kit studio
exit
npm run dev
openssl rand -base64 32<\n>
npm install --save jose
nvim eq.md
v
npx drizzle-kit migrate
npx drizzle-kit --help
npx drizzle-kit migrate --help
npx drizzle-kit migrate
npx drizzle-kit
npx drizzle-kit up
npx drizzle-kit
npx drizzle-kit check
set -o allexport
zsh
npx drizzle-kit generate
npx drizzle-kit up
ls
$env
open .env
open .env | from toml
open .env | from toml | load-env
$env.TURSO_DATABASE_URL
npx drizzle-kit
npx drizzle-kit instrospect
npx drizzle-kit up
npx drizzle-kit drop
npx drizzle-kit up
npx drizzle-kit drop
npx drizzle-kit 
npx drizzle-kit check
npx drizzle-kit up
npx drizzle-kit generate
npx drizzle-kit up
npx drizzle-kit down
npx drizzle-kit drop
npx drizzle-kit
npx drizzle-kit --version
npm install --update drizzle-kit
npm install
npx drizzle-kit --version
npx drizzle-kit 
npx drizzle-kit export
bunx drizzle-kit
bunx drizzle-kit --version
bunx drizzle-kit 
bunx drizzle-kit check
bunx drizzle-kit 
bunx drizzle-kit migrate
bunx drizzle-kit generate
bunx drizzle-kit migrate
bunx drizzle-kit drop
bunx drizzle-kit 
bunx drizzle-kit push
npm run studio
bunx drizzle-kit studio
bunx drizzle-kit push
npm run dev
make run iphone
flutter upgrade
zsh
ls
cd. .
cd ..
lf
lf Downloads/
go run ./cmd/server
raycast
brew search raycast
brew info raycast
brew upgrade raycast
raycast
which ls
ls
clear
ls
nvim yusimee
l
ls
lf
brew search rpcs3
nix search
nix profile search rpcs3
nix profile list --help
nix profile list
which bun
brew list
which go
lf Downloads/
pgrep brave
brave
pgrep Brave
pkill Brave
make generator
go run ./cmd/server
brew list
brew remove diffusionbee
brew remove yaak
brew list
brew remove audacity
brew remove draw-things
brew lsit
brew list
brew 
brew doctor
brew untap Homebrew/homebrew-services
brew doctor
brew list
brew remove studio-3t
go run ./cmd/server
crontab -l
sudo crontab -l
go run ./cmd/server
make run iphone
make run iphone
podman compose up
brew list 
brew list | grep picto
brew search picto
brew remove pictogram
ts
cd Downloads/
l
lf
ls
clear
ls
lf
ls
lf
zsh
lf
adb connect 192.168.0.253:38959
lf
exit
kexit
exit
lf
cd
exitr
exit
cd ..
lf Downloads/
exit
ls
clear
exit
go run ./cmd/server
nix 
nix --help
nix search lima
nix search nixpkgs#lima
nix search nixpkgs#lima*
nix search nixpkgs#lima ^
nix search lima ^
nix search nixpkgs#lima ^
nix search nixpkgs#brave
nix search nixpkgs#brave ^
nix search nixpkgs#brave* ^
nix search nixpkgs#brave^
nix profile install nixpkgs#Lima
nix profile install nixpkgs#lima
lima
sys disks
limactl create default
limactl status
limactl ps
lima ps
limactl
limactl list
lima ls
lima pwd
limactl start
lima pwd
lima neofetch
lima ps
lima top
ls
clear
lima ls
lima bash
ls
limactl ls
limactl start template://docker
docker context create lima --docker "host=unix:///Users/fausto/.lima/docker/sock/docker.sock"
docker context use lima
lima ls
limactl ls
limactl stop default
limactl ls
clear
limactl ls
clear
lima nerdctl
lima --help
$env.LIMA_INSTANCE = 'docker'
lima ls
lima nerdctl
nerdctl.lima 
nerdctl.lima compose
docker compose up
nvim ~/.lima/docker/lima.yaml
lima ls
btop
limactl stop docker
limactl ls
clear
limactl machine
limactl machine ls
limactl
clear
podman machine list
podman compose up
podman machine start
exit
v
ts
pgrep logi
go run ./cmd/server
rm flutter_01.png
open assets/images/icons/
^open assets/images/icons/
l
ls
lf
nmap
l
ls
ls ~/Desktop/
clear
zsh 
cd ..
exit
exit
exit
exit
lf
ls
clear
lf
zed .
nvim ~/.config/nushell/history.txt
clear
ccd 
v
v
cd
nmap
sys
sys net
sys
sys temp
nmap
nix search nmap
nix search nmap ^
nix search nixpkgs nmap
nix profile install nixpkgs#nmap
nmap
nmap -sp 192.168.1.1/24
nmap -sp 192.168.1.1
nmap -sp 192.168.0.0/16
nmap -v -sn 192.168.0.0/16
adb connect 192.168.0.120:38281
lf
ls
lf
cd ..
lf 
lf
lf
exit
exit
exit
exiy
exit
exiy
exiyt
exit
lf
code ../utn/simulacion
lf
code .
zed .
nvim ~/.config/nushell/history.txt
curl -X GET http://192.168.0.10:8080/notes --header "Authentication: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4"
curl -X GET http://192.168.0.10:8080/notes --header "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4"
curl -X GET http://192.168.0.10:8080/notes --header "Authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4"
curl -X GET http://192.168.0.10:8080/notes --header "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4"
http
curl --help | grep cookies
curl --help | grep cookie
curl -X GET http://192.168.0.10:8080/notes --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4"
curl -X POST http://192.168.0.10:8080/notes --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" --header "Content-Type: application/json" --data '{"id":5,}'
curl -X POST http://192.168.0.10:8080/notes --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}'
curl -X POST http://192.168.0.10:8080/notes/new --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}'
curl -X GET http://192.168.0.10:8080/notes --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4"
curl -X GET http://192.168.0.10:8080/notes --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" | jq
nvim hola.sh
while true { curl -X POST http://192.168.0.10:8080/notes/new --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}' }
curl -X GET http://192.168.0.10:8080/notes --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" | jq
while true { curl -X POST http://192.168.0.10:8080/notes/new --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}' }
while true { curl -X POST http://192.168.0.10:8080/notes/new --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}' | jq }
clear
lcear
nvim ~/.config/nushell/history.txt
cler
clear
curl
clear
podman compose up
ts
while true { curl -X POST http://192.168.0.10:8080/notes/new --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImlhdCI6MTc0NTQ0MTI3NCwiZXhwIjoxNzQ1NDQ0ODc0fQ.Bl1_IQj7VD9pnUPy0-C27zluLvqZW_2aSjiCeTCX3j4" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}' | jq }
while true { curl -X POST http://192.168.0.10:8080/notes/new --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImlhdCI6MTc0NTQ0MjcxNywiZXhwIjoxNzQ1NDQ2MzE3fQ.BFcqAGVoHobYrneovwAf6VNbUXtBPAoF56oP6gT36oQ" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}' | jq }
while true { curl -X POST http://192.168.0.10:8080/notes/new --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImlhdCI6MTc0NTQ0MjcxNywiZXhwIjoxNzQ1NDQ2MzE3fQ.BFcqAGVoHobYrneovwAf6VNbUXtBPAoF56oP6gT36oQ" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}' }
while true { curl -X POST http://192.168.0.10:8080/notes --cookie "token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjUsImlhdCI6MTc0NTQ0MjcxNywiZXhwIjoxNzQ1NDQ2MzE3fQ.BFcqAGVoHobYrneovwAf6VNbUXtBPAoF56oP6gT36oQ" --header "Content-Type: application/json" --data '{"title":"lucho","content":"puto"}' | jq }
npm run dev
bunx drizzle-kit push
v
bunx drizzle-kit
bunx drizzle-kit drop
bunx drizzle-kit drop --help
bunx drizzle-kit
bunx drizzle-kit migrate
bunx drizzle-kit migrate --help
bunx drizzle-kit
bunx drizzle-kit drop
npm run dev
lf
bunx drizzle-kit check
bunx drizzle-kit generate
bunx drizzle-kit
bunx drizzle-kit check
bunx drizzle-kit dro
bunx drizzle-kit drop
bunx drizzle-kit push
lf
bunx drizzle-kit
bunx drizzle-kit migrate
bunx drizzle-kit drop
rm -rf drizzle/
bunx drizzle-kit
bunx drizzle-kit check
lf
bunx drizzle-kit
bunx drizzle-kit --version
bunx drizzle-kit export
bunx drizzle-kit 
bunx drizzle-kit instrospect
bunx drizzle-kit introspect
lf
bunx drizzle-kit drop
lf
bunx drizzle-kit introspect
lf
exit
bunx drizzle-kit
bunx drizzle-kit drop
bunx drizzle-kit
bunx drizzle-kit introspect
bunx drizzle-kit push
lf
npm run dev
exit
npm install --save swapy
lf
v
git pull
git stash
git pull
git reset 969a46a5713c7d2a9b25b6f095971aaad9f0e978
v
git pull
v
git pull
git config pull.rebase true
git pull
v
git reset 969a46a5713c7d2a9b25b6f095971aaad9f0e978
v
git pull
npm run dev
git pull
v
git pull
git reset 969a46a5713c7d2a9b25b6f095971aaad9f0e978
git push
git push --force
git reset 969a46a5713c7d2a9b25b6f095971aaad9f0e978
v
git push --force
git stash pop
v
git stash --help
git stash list
git stash pop
git stash 
git stash list
git stash pop 1
lf
npm run dev
v
git status
git push
git push --force
clear
git status
git pull
git stash list
git stash --help
git stash clear
v
bunx drizzle-kit studio
git status
npm run dev
npm run dev
lf
lf Downloads/
lf
lf ~/Downloads/
^open assets/
make run iphone
make run iphone
make generator
lf
lf Downloads/
nvim qm.md
lf
nvim mama.md
lf
nix search codex
nix search nixpkgs codex
nix profile install nixpkgs#codex
codex
code .
nix profile remove nixpkgs#codex
nix profile remove codex
clear
nix profile list
brew list
brew search trae
brew info trae
which trae
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
lcs
ls
clear
ls
clear
zed .
clear
nvim 
exit
ls
rm  flutter_01.png
ls
rm \
ls
f
lf
exit
git clone https://github.com/opencode-ai/opencode.git<\n>
cd opencode/
go build -o opencode
./opencode
./opencode --help
mv opencode ~/.local/bin/opencode
cd
ccd
opencode
opencode --hel
opencode --help
mkdir -p ~/.config/opencode
mkdir -r ~/.config/opencode
mkdir --help
mkdir -v ~/.config/opencode
nvim ~/.config/opencode/.opencode.json
opencode
ccd
opencode
nvim
v
nvim .opencode/
open .opencode/opencode.db | columns 
open .opencode/opencode.db | get files
open .opencode/opencode.db | get messages
open .opencode/opencode.db | get messages | get parts
open .opencode/opencode.db | get messages | get parts | to json
open .opencode/opencode.db | get messages | get parts
opencode
v
cd
cd Downloads/
lf
exit
exit
exit
exit
nvim qm.md
cd
cd Downloads/
l
ls
lf
cd Downloads/
lf
exigt
exit
exit
nvim ~/.config/opencode/.opencode.json
cd
ccd
go run ./cmd/server
aws configure sso
cd Downloads/
lf
exit
cd Downloads/
lf
;f
lf
sys disks
ls
lf
sys disks
lf
sys disks
cd .android/
sys dikss
sys disks
lf
sys disks
lf
sys disks
lf
ncduy
ncdu
lf
^open .
lf
exit
exit
ls
clear
lf
^open .
ls
lf
ls
lf
ls
lf
^open .
lf
cd ..
lf
nvim link.md
lf
pkill mldonkey
lf
ls
lf
ls
lf
cd
exit
exit
exit
cd Downloads/
lf
sys disks
nvim hola.md
rm hola.md
lf
nvim ~/.config/nushell/history.txt
lf
nvim qm.md
lf
ls
clear
ls
clear
ls
clear
sl
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
;s
c;ear
;s
c;ear
clear
cd sw
cd
cd se
cd sw
ls
clear
cd futbol
ccd
lf
v
npm run build
npm run dev
npm start
clear
v
cat .env
ts
code .
git pull
npm install --save-dev @eslint/eslintrc
npm run lint
git add .
git commit -m "feat: prettier"
git push
clear
npm run studio
exit
nvim ~/.config/nushell/history.txt
lff
lf
cd ..
ls
rm -rf colombia*
lf
lf
exit
lf
nvim ~/.config/nushell/history.txt
nix shell
nix shell nixpkgs#cloc
clear
wc
ccd
find . -name "*.go" -type f | xargs wc -l
^find . -name "*.go" -type f | xargs wc -l
clear
^find . -name "*.go" -type f | xargs wc -l
clear
ccd
^find . -name "*.dart" -type f | xargs wc -l
clear
cd
cd Downloads/
ls
clea
clear
lf
nvim temp
ls
clear
ls
clear
open canna.seed.sql
clear
ls
clear
ls
nvim qm.md
rm temp
lf
clear
nvim data.md
mv data.md futbol.md
ls
clear
git clone https://github.com/Roshan-R/termv.git
cd termv/
ls
chmod +x termv
termv
./termv
nix shell
nix profile install nixpkgs#gawk
sudo launchctl bootstrap system /Library/LaunchDaemons/org.nixos.darwin-store.plist<\n>
sudo launchctl bootstrap system /Library/LaunchDaemons/org.nixos.nix-daemon.plist<\n>
sudo launchctl kickstart -k system/org.nixos.darwin-store<\n>
sudo launchctl kickstart -k system/org.nixos.nix-daemon<\n>
nvim nixdaemon.sh
chmod +x nixdaemon.sh
clear
./termv
./termv --help
./termv
./termv --help
nvim
nvim bsas.m3u
open bsas.m3u
open bsas.m3u | columns
open bsas.m3u | get columns
open bsas.m3u | to table
open bsas.m3u 
nvim bsas.m3u
mpv 'https://livetrx01.vodgc.net/live-01-07-ciudad.vodgc.net/tracks-v2a1/mono.m3u8<\n>'
mpv 'https://livetrx01.vodgc.net/live-01-07-ciudad.vodgc.net/tracks-v2a1/mono.m3u8'
cd ..
ls
nvim iPTV-Free-List_XXX.m3u
ls
nvim iPTV-Free-List_TV.m3u
nvim bsas.m3u
ls
clear
l
ls
make run iphone
nvim futbol.md
exit
exit
exit
lf
ccd
bunx drizzle-kit stuido
bunx drizzle-kit studio
cd
cd Downloads/
limctxl
limactl
limactl list
limactl start docker
docker context use lima-docker
docker context use docker
docker context
docker context ls
docker context lima
docker context use lima
clear
docker ls
docker ps
clear
docker ps
top
clear
limactl list
clear
podman compose up
docker context use lima
docker compose up
nvim ~/.lima/docker/lima.yaml
limactl ls
limactl stop docker
limactl start docker
docker context
docker context ls
docker context show
clear
docker compose up
nvim ~/.lima/docker/lima.yaml
limactl stop docker
limactl start docker
limactl sl
limactl ls
limactl start docker
nvim ~/.lima/docker/ha.stderr.log
nvim ~/.lima/docker/lima.yaml
limactl edit --mount-writable --mount-type=virtiofs
nvim ~/.lima/default/lima.yaml
limactl --help
limactl edit --hepl
limactl edit --help
limactl edit --mount-writable --mount-type=virtiofs docker
podman machine
podman machine list
podman machine stop
podman list
podman machine list
pgrep podman
clear
exit
clear
nix profile list
nix profile list | grep lima
clear
nix profile list | grep docker
l
lf
kf
lf
adb device
adb devices
docker compose up
lf
cd Downloads/
ncdu
lf
sys disks
lf
sys disks
lf
sys diskss
sys disks
lf
sys disks
lf
sys disks
lf
sys disks
lf
make run
make tailwind
make run
make templ
go get -u github.com/a-h/templ
make templ
make run
go get
go mod tidy
go get
make run
make tailwind
make run
make tailwind
lf
uuid | pbcopy
zsh
exit
uuid | pbcopy
exit
